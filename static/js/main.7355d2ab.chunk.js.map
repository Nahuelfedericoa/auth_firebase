{"version":3,"sources":["FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["FileUpload","state","uploadValue","picture","handleUpload","bind","event","file","target","files","task","firebase","storage","ref","name","put","on","snapshot","percentage","bytesTransferred","totalBytes","setState","error","console","log","message","downloadURL","value","this","max","type","onChange","width","src","alt","Component","App","user","handleAuth","handleLogOut","auth","onAuthStateChanged","provider","GoogleAuthProvider","signInWithPopup","then","result","email","catch","code","signOut","photoURL","displayName","onClick","className","renderLoginButton","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySA8CeA,E,YAzCX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,YAAa,EACbC,QAAS,MAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANX,E,0EAQCC,GAAQ,IAAD,OACXC,EAAOD,EAAME,OAAOC,MAAM,GAE1BC,EADaC,IAASC,UAAUC,IAAnB,iBAAiCN,EAAKO,OACjCC,IAAIR,GAE5BG,EAAKM,GAAG,iBAAiB,SAAAC,GACrB,IAAIC,EAAcD,EAASE,iBAAmBF,EAASG,WAAc,IACrE,EAAKC,SAAS,CACVnB,YAAagB,OAElB,SAAAI,GACCC,QAAQC,IAAIF,EAAMG,YACnB,WACC,EAAKJ,SAAS,CACVnB,YAAa,IACbC,QAASO,EAAKO,SAASS,mB,+BAM/B,OACI,6BACI,8BAAUC,MAAOC,KAAK3B,MAAMC,YAAa2B,IAAI,QAC7C,6BACA,2BAAOC,KAAK,OAAOC,SAAUH,KAAKxB,eAClC,6BACA,yBAAK4B,MAAM,MAAMC,IAAKL,KAAK3B,MAAME,QAAS+B,IAAI,U,GApCrCC,aC+DVC,E,YA7Db,aAAe,IAAD,8BACZ,+CACKnC,MAAQ,CACXoC,KAAM,MAER,EAAKC,WAAa,EAAKA,WAAWjC,KAAhB,gBAClB,EAAKkC,aAAe,EAAKA,aAAalC,KAAlB,gBANR,E,kFASO,IAAD,OAClBM,IAAS6B,OAAOC,oBAAmB,SAAAJ,GACjC,EAAKhB,SAAS,CAACgB,c,mCAKjB,IAAMK,EAAW,IAAI/B,IAAS6B,KAAKG,mBAEnChC,IAAS6B,OAAOI,gBAAgBF,GAC7BG,MAAK,SAAAC,GAAM,OAAIvB,QAAQC,IAAR,UAAesB,EAAOT,KAAKU,MAA3B,8BACfC,OAAM,SAAA1B,GAAK,OAAIC,QAAQC,IAAR,gBAAqBF,EAAM2B,KAA3B,aAAoC3B,EAAMG,e,qCAI5Dd,IAAS6B,OAAOU,UACfL,MAAK,SAAAC,GAAM,OAAIvB,QAAQC,IAAR,UAAesB,EAAOT,KAAKU,MAA3B,kBACfC,OAAM,SAAA1B,GAAK,OAAIC,QAAQC,IAAR,gBAAqBF,EAAM2B,KAA3B,aAAoC3B,EAAMG,e,0CAI1D,OAAGG,KAAK3B,MAAMoC,KAEV,6BACE,yBAAKJ,IAAKL,KAAK3B,MAAMoC,KAAKc,SAAUjB,IAAKN,KAAK3B,MAAMoC,KAAKe,cACzD,mCAASxB,KAAK3B,MAAMoC,KAAKe,YAAzB,KACA,4BAAQC,QAASzB,KAAKW,cAAtB,SACA,kBAAC,EAAD,OAKJ,4BAAQc,QAASzB,KAAKU,YAAtB,uB,+BAOJ,OACE,yBAAKgB,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAEF,yBAAKA,UAAU,UACZ1B,KAAK2B,0B,GAvDIpB,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNjD,IAASkD,cAAc,CACnBC,OAAQ,0CACJC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGvBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.7355d2ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from 'firebase';\n\n\nclass FileUpload extends Component{\n    constructor(){\n        super()\n        this.state = {\n            uploadValue: 0,\n            picture: null\n        }\n        this.handleUpload = this.handleUpload.bind(this);\n    }\n    handleUpload (event) {\n        const file = event.target.files[0];\n        const storageRef = firebase.storage().ref(`/Fotos/${file.name}`);\n        const task = storageRef.put(file);\n\n        task.on('state_changed', snapshot => {\n            let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            this.setState({\n                uploadValue: percentage\n            })\n        }, error => {\n            console.log(error.message);\n        }, () => {\n            this.setState({\n                uploadValue: 100,\n                picture: task.snapshot.downloadURL\n            });\n        });\n\n    }\n    render(){\n        return(\n            <div>\n                <progress value={this.state.uploadValue} max=\"100\"></progress>\n                <br />\n                <input type=\"file\" onChange={this.handleUpload}/>\n                <br />\n                <img width=\"320\" src={this.state.picture} alt=\"\" />\n                \n            </div>\n        )\n    }\n}\nexport default FileUpload;\n","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport FileUpload from './FileUpload'\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      user: null\n    }\n    this.handleAuth = this.handleAuth.bind(this);\n    this.handleLogOut = this.handleLogOut.bind(this);\n  }\n\n  componentWillMount(){\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({user})\n    })\n  }\n\n  handleAuth(){\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    firebase.auth().signInWithPopup(provider)\n      .then(result => console.log(`${result.user.email} ha iniciado sesiÃ³n`))\n      .catch(error => console.log(`Error ${error.code}: ${error.message}`))\n};\n\n  handleLogOut(){\n    firebase.auth().signOut()\n    .then(result => console.log(`${result.user.email} ha salido`))\n    .catch(error => console.log(`Error ${error.code}: ${error.message}`))\n  };\n  renderLoginButton(){\n    //si el usuario esta logueado\n    if(this.state.user){\n      return (\n        <div>\n          <img src={this.state.user.photoURL} alt={this.state.user.displayName} />\n          <p>Hola {this.state.user.displayName}!</p>\n          <button onClick={this.handleLogOut}>Salir</button>\n          <FileUpload />\n        </div>\n      );\n    }else{\n      return(\n      <button onClick={this.handleAuth}>\n          Loggin con Google\n      </button>\n      )}\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Social</h2>\n      </header>\n      <div className=\"Button\">\n        {this.renderLoginButton()}\n      </div>\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyAogkynKGl9T-21yaGO05t0trYuM6eV-Kw\",\n        authDomain: \"social-debab.firebaseapp.com\",\n        databaseURL: \"https://social-debab.firebaseio.com\",\n        projectId: \"social-debab\",\n        storageBucket: \"social-debab.appspot.com\",\n        messagingSenderId: \"40639760812\",\n        appId: \"1:40639760812:web:efb4523d3ce98cd3dc1209\",\n        measurementId: \"G-ZYD04HP3F2\"\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}